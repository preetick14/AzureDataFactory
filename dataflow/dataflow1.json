{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "personaldetails",
						"type": "DatasetReference"
					},
					"name": "Personaldetails"
				},
				{
					"dataset": {
						"referenceName": "locationdetails",
						"type": "DatasetReference"
					},
					"name": "locationdetails"
				},
				{
					"dataset": {
						"referenceName": "customerpurchases",
						"type": "DatasetReference"
					},
					"name": "customerpurchases"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Age as string,",
				"          IsActive as string,",
				"          {LocationID } as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Personaldetails",
				"source(output(",
				"          LocationID as integer,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> locationdetails",
				"source(output(",
				"          CustomerID as integer,",
				"          Month as string,",
				"          PurchaseAmount as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> customerpurchases",
				"Personaldetails derive(Fullname = concat(FirstName, ' ', LastName) ) ~> derivedColumn1",
				"derivedColumn1 filter(IsActive == true && Age >= 18 ) ~> filter1",
				"filter1, locationdetails lookup({LocationID } == LocationID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"customerpurchases aggregate(groupBy(CustomerID),",
				"     TotalSpend = sum(PurchaseAmount)) ~> aggregate1",
				"lookup1, aggregate1 join(Personaldetails@CustomerID == aggregate1@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sort(asc(Fullname, true)) ~> sort1",
				"sort1 keyGenerate(output(CustomerKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}